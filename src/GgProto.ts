/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.8
 * source: GgProto.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Rost extends pb_1.Message {
    constructor(data?: any[] | {
        client?: number;
        player?: number;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("client" in data && data.client != undefined) {
                this.client = data.client;
            }
            if ("player" in data && data.player != undefined) {
                this.player = data.player;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get client() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set client(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get player() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set player(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get name() {
        return pb_1.Message.getField(this, 4) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        client?: number;
        player?: number;
        name?: string;
    }) {
        const message = new Rost({});
        if (data.client != null) {
            message.client = data.client;
        }
        if (data.player != null) {
            message.player = data.player;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            client?: number;
            player?: number;
            name?: string;
        } = {};
        if (this.client != null) {
            data.client = this.client;
        }
        if (this.player != null) {
            data.player = this.player;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.client !== undefined)
            writer.writeInt32(2, this.client);
        if (this.player !== undefined)
            writer.writeInt32(3, this.player);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(4, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Rost {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Rost();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.client = reader.readInt32();
                    break;
                case 3:
                    message.player = reader.readInt32();
                    break;
                case 4:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Rost {
        return Rost.deserialize(bytes);
    }
}
